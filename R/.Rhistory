sampleInfo <- dplyr::select(sampleInfo, risk)
# Remove samples with empty value
sampleInfo[sampleInfo == ""] <- NA
sampleInfo <- na.omit(sampleInfo, "risk")
samples_to_keep <- row.names(sampleInfo)
# samples_to_keep
length(unique(sampleInfo$risk)) # 2 unique values
}
if (seriesName == "GSE62165") {
# sampleInfo <- select(sampleInfo,
#                      "grouped stage:ch1")
# sampleInfo <- rename(sampleInfo,
#                      stage="grouped stage:ch1")
sampleInfo <- select(sampleInfo,
"Stage:ch1")
sampleInfo <- rename(sampleInfo,
stage="Stage:ch1")
# Remove samples with NA value
sampleInfo[sampleInfo == "NA"] <- NA
sampleInfo <- na.omit(sampleInfo, "stage")
# Convert to 4 groups: Early (1,2) & Advanced (3,4) stages
# sampleInfo$stage[sampleInfo$stage == "1a"] <- "Early"
# sampleInfo$stage[sampleInfo$stage == "1b"] <- "Early"
# sampleInfo$stage[sampleInfo$stage == "2a"] <- "Early"
# sampleInfo$stage[sampleInfo$stage == "2b"] <- "Early"
# sampleInfo$stage[sampleInfo$stage == "3"] <- "Advanced"
# sampleInfo$stage[sampleInfo$stage == "4"] <- "Advanced"
# sampleInfo$stage[sampleInfo$stage == "1a"] <- "1"
# sampleInfo$stage[sampleInfo$stage == "1b"] <- "1"
# sampleInfo$stage[sampleInfo$stage == "2a"] <- "2"
# sampleInfo$stage[sampleInfo$stage == "2b"] <- "2"
# sampleInfo$stage[sampleInfo$stage == "3"] <- "3"
# sampleInfo$stage[sampleInfo$stage == "4"] <- "4"
sampleInfo$stage[sampleInfo$stage == "1a"] <- "1"
sampleInfo$stage[sampleInfo$stage == "1b"] <- "1"
sampleInfo$stage[sampleInfo$stage == "2a"] <- "2"
sampleInfo$stage[sampleInfo$stage == "2b"] <- "2"
sampleInfo$stage[sampleInfo$stage == "3"] <- "3"
sampleInfo$stage[sampleInfo$stage == "4"] <- "3"
samples_to_keep <- row.names(sampleInfo)
# samples_to_keep
length(unique(sampleInfo$stage)) # 2 unique values
}
if (seriesName == "GSE57495") {
# sampleInfo <- select(sampleInfo, "overall survival (month):ch1")
# sampleInfo <- rename(sampleInfo,
#                      OS="overall survival (month):ch1")
# sampleInfo$OS <- as.numeric(sampleInfo$OS)
# # Low risk -> median of median survival of 35 months
# # High risk -> median of median survival of 15 months
# sampleInfo$risk[sampleInfo$OS <= 23] <- "High"
# sampleInfo$risk[sampleInfo$OS > 23] <- "Low"
# sampleInfo <- select(sampleInfo, risk)
sampleInfo <- select(sampleInfo, "Stage:ch1")
sampleInfo <- rename(sampleInfo,
stage="Stage:ch1")
sampleInfo$stage[sampleInfo$stage == "1B"] <- "1"
sampleInfo$stage[sampleInfo$stage == "2A"] <- "2"
sampleInfo$stage[sampleInfo$stage == "2B"] <- "2"
}
features <- fData(gse)
# We keep the probe ID and the gene accession
if(seriesName == "GSE112282" || seriesName == "GSE37645"
|| seriesName == "GSE45757" || seriesName == "GSE21501"
|| seriesName == "GSE89396") {
features <- dplyr::select(features,ID,GB_ACC)
}
if (seriesName == "GSE14426") {
features <- dplyr::select(features,ID,Accession)
}
if (seriesName == "GSE28735" || seriesName == "GSE62452"
|| seriesName == "GSE62165" || seriesName == "GSE57495") {
features <- dplyr::select(features,ID,GB_LIST)
}
if(seriesName == "GSE112282") {
design_colnames <- c("BET","BETMEK","MEK","VEHICLE","COLO201",
"HPAFII","NCIH510","RKO","Replicate2")
design <- model.matrix(~0+sampleInfo$treatment
+sampleInfo$line
+sampleInfo$replicate)
colnames(design) <- design_colnames
contrasts <- makeContrasts(BET - VEHICLE,
BETMEK - VEHICLE,
MEK - VEHICLE,
levels=design)
}
if (seriesName == "GSE37645") {
design <- model.matrix(~0+sampleInfo$sensitive)
colnames(design) <- c("NonSensitive","Sensitive")
contrasts <- makeContrasts(Sensitive - NonSensitive, levels=design)
}
if (seriesName == "GSE45757") {
# TODO Fix typo Mpanc96=MPanc96
design_colnames <- c("Treated","Untreated","Capan2","CFPAC1","COLO357",
"HPAFII","Hs766T","L33","L36pl","L36sl","MIAPaCa2",
"MPanc96","Panc1","Panc1005","Panc203","Panc213",
"Panc327","Panc504","Panc603","Panc813","PL45",
"SU8686","SW1990")
design <- model.matrix(~0+sampleInfo$treated
+sampleInfo$line)
colnames(design) <- design_colnames
contrasts <- makeContrasts(Untreated - Treated,
levels=design)
}
if (seriesName == "GSE14426") {
design <- model.matrix(~0+sampleInfo$source)
design_colnames <- c("ATRA168h","ATRA24h","Vehicle168h","Vehicle24h")
colnames(design) <- design_colnames
contrasts <- makeContrasts(Vehicle168h - ATRA168h,
Vehicle24h - ATRA24h,
levels=design)
}
if (seriesName == "GSE89396") {
design <- model.matrix(~0+sampleInfo$treatment)
colnames(design) <- c("treated","untreated")
contrasts <- makeContrasts(untreated - treated,
levels=design)
}
if (seriesName == "GSE28735" || seriesName == "GSE62452") {
design <- model.matrix(~0+sampleInfo$tissue)
design_colnames <- c("NonTumour","Tumour")
colnames(design) <- design_colnames
contrasts <- makeContrasts(Tumour - NonTumour,
levels=design)
}
if (seriesName == "GSE21501") {
design <- model.matrix(~0+sampleInfo$risk)
design_colnames <- c("HighRisk","LowRisk")
colnames(design) <- design_colnames
contrasts <- makeContrasts(LowRisk - HighRisk,
levels=design)
}
if (seriesName == "GSE62165") {
design <- model.matrix(~0+sampleInfo$stage)
# design_colnames <- c("g1a","g1b","g2a","g2b","g3","g4")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts("g1b - g1a",
#                            "g2a - g1a",
#                            "g2b - g1a",
#                            "g3 - g1a",
#                            "g4 - g1a",
#                            "g2a - g1b",
#                            "g2b - g1b",
#                            "g3 - g1b",
#                            "g4 - g1b",
#                            "g2b - g2a",
#                            "g3 - g2a",
#                            "g4 - g2a",
#                            "g3 - g2b",
#                            "g4 - g2b",
#                            "g4 - g3",
#                            levels=design)
# design_colnames <- c("g1","g2","g3","g4")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts("g3 - g1",
#                            "g3 - g2",
#                            "g4 - g1",
#                            "g4 - g2",
#                            levels=design)
# design_colnames <- c("Advanced","Early","LNM")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts(Early - Advanced,
#                            LNM - Advanced,
#                            LNM - Early,
#                            levels=design)
# design_colnames <- c("Advanced","Early")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts(Early - Advanced,
#                            levels=design)
design_colnames <- c("g1","g2","g3")
colnames(design) <- design_colnames
contrasts <- makeContrasts("g2 - g1",
"g3 - g1",
"g3 - g2",
levels=design)
}
if(seriesName == "GSE57495") {
# design <- model.matrix(~0+sampleInfo$risk)
# design_colnames <- c("HighRisk","LowRisk")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts(LowRisk - HighRisk,
#                            levels=design)
design <- model.matrix(~0+sampleInfo$stage)
# design_colnames <- c("g1","g1b","g2a","g2b")
# colnames(design) <- design_colnames
# contrasts <- makeContrasts("g1b - g1",
#                            "g2a - g1",
#                            "g2a - g1b",
#                            "g2b - g1",
#                            "g2b - g1b",
#                            "g2b - g2a",
#                            levels=design)
design_colnames <- c("g1","g2")
colnames(design) <- design_colnames
contrasts <- makeContrasts("g2 - g1",
levels=design)
}
eset <- exprs(gse)
##############################################
## Prepare the expression data if necessary ##
##############################################
if (seriesName == "GSE28735" || seriesName == "GSE62452"
|| seriesName == "GSE62165" || seriesName == "GSE57495") {
library(tidyr)
# Split rows by Gene in GB_LIST duplicating the information
eset_df <- as.data.frame(exprs(gse))
# Add a new column with the GB_LIST
eset_df <- cbind(features$GB_LIST,eset_df)
# Rename the column
eset_df <- eset_df %>%
dplyr::rename(GB_LIST = "features$GB_LIST")
# eset_df$GB_LIST
# Check if there are repetitions among the probe IDs
length(rownames(eset_df))
length(unique(rownames(eset_df)))
delimiter <- ","
if (seriesName == "GSE57495") {
delimiter <- " "
}
# Duplicate each row as many times as elements are present in GB_LIST
eset_df2 <-
eset_df %>%
mutate(GB_LIST = strsplit(as.character(GB_LIST), delimiter)) %>%
unnest(cols = c(GB_LIST)) %>%
filter(GB_LIST != "")%>%
dplyr::rename(GB_ACC = GB_LIST) #%>%
# select(V1, 1:-1)
# Check if there is any missing value in this column
which(is.na(eset_df2$GB_ACC))
eset2 <- limma::avereps(eset_df2[,2:ncol(eset_df2)], eset_df2$GB_ACC)
ncol(eset2)
nrow(eset2)
eset <- eset2
# eset["AB001736","GSM1527105"]
# eset["AK123548","GSM1527105"]
}
if (seriesName == "GSE45757") {
# Remove columns of samples without the relevant metadata
eset <- subset(eset, select=-c(GSM1113671,GSM1113672,GSM1113673,
GSM1113674,GSM1113675,GSM1113676,
GSM1113809,GSM1113810,GSM1113811))
}
if (seriesName == "GSE14426" || seriesName == "GSE21501"
|| seriesName == "GSE62165") {
eset <- eset[,samples_to_keep]
}
fit <- lmFit(eset, design)
head(fit$coefficients)
contrasts
fit2 <- contrasts.fit(fit, contrasts)
# Get differential expression statistics and p-values with empirical Bayes
fit2 <- eBayes(fit2)
# Results by contrast
topTable(fit2)
# How many genes are differentially-expressesd
results <- decideTests(fit2)
# results <- decideTests(fit2, p.value = 0.3)
table(results)
# Print top 10 DEG with meaningful name
if (seriesName != "GSE28735"
&& seriesName != "GSE62452"
&& seriesName != "GSE62165") {
gene_accession <- "GB_ACC"
if (seriesName == "GSE14426") {
gene_accession <- "Accession"
}
anno <- fData(gse)
# anno
anno <- dplyr::select(anno,all_of(gene_accession))
fit2$genes <- anno
} else {
eset2_df <- as.data.frame(eset2)
eset2_df$GB_ACC <- rownames(eset2_df)
# eset2_df$GB_ACC
fit2$genes <- eset2_df$GB_ACC
}
topTable(fit2)
vennDiagram(results)
# make a boolean index vector based on criteria
if (seriesName == "GSE14426") {
iv <- results[,1] != 0 & results[,2] != 0
}
results[,2]
if (seriesName == "GSE45757" || seriesName == "GSE28735"
|| seriesName == "GSE62452"|| seriesName == "GSE21501") {
iv <- results[,1] != 0
}
# use it to extract gene names
deg <- fit2$genes[iv]
length(deg)
# gene_list <- unlist(fit2$genes)
gene_list <- deg
length(unique(gene_list))
mapped <- select(org.Hs.eg.db, gene_list, c("ENTREZID","SYMBOL"), "ACCNUM")
length(unique(mapped$ACCNUM))
# 2842
length(unique(mapped$ENTREZID))
mart <- useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
mapped_to_hgnc <- getBM(attributes=c('hgnc_symbol'),
filters = 'entrezgene_id',
mart = mart,
values = mapped$ENTREZID)
length(unique(mapped_to_hgnc$hgnc_symbol))
write.table(mapped_to_hgnc,
file=paste(seriesName,"common_genes.csv", sep="_"),
col.names = "HGNC",
row.names = FALSE)
# Treatment vs outcome
series1 = readLines("GSE45757_common_genes.csv")
# Treatment vs outcome
# series1 = readLines("GSE45757_common_genes.csv")
series1 = read.csv(file = "GSE45757_common_genes.csv", header = TRUE)
View(series1)
series2 = read.csv(file = "GSE112282_common_genes.csv", header = TRUE)
series3 = read.csv(file = "GSE14426_common_genes.csv", header = TRUE)
series1 = read.csv(file = "GSE45757_common_genes.csv", header = TRUE)
series2 = read.csv(file = "GSE112282_common_genes.csv", header = TRUE)
series3 = read.csv(file = "GSE14426_common_genes.csv", header = TRUE)
common_treatment_vs_outcome <- intersect(series1$HGNC, series2$HGNC, series3$HGNC)
common_treatment_vs_outcome <- dplyr::intersect(series1$HGNC, series2$HGNC, series3$HGNC)
table(series1)
table(series1, series2)
df_tratment_vs_outcome <- data.frame(series1,series2,series3)
df_tratment_vs_outcome <- data.frame(series1,series2,series3,check.rows = FALSE)
library(data.table)
rbindlist(mget(paste0("series", 1:3)))[, .N, Id]
rbindlist(mget(paste0("series", 1:3)))[, .N, HGNC]
common_treatment_vs_outcome <- rbindlist(mget(paste0("series", 1:3)))[, .N, HGNC]
View(common_treatment_vs_outcome)
common_treatment_vs_outcome[order(-N)]
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N)],file="ranked_treatment_vs_outcome.csv")
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N)],file="ranked_treatment_vs_outcome.csv", row.names = NULL)
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N)],file="ranked_treatment_vs_outcome.csv", row.names = FALSE)
common_treatment_vs_outcome[order(-N,HGNC)]
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N,HGNC)],file="ranked_treatment_vs_outcome.csv", row.names = FALSE)
common_treatment_vs_outcome <- rbindlist(mget(paste0("series", 1:3)))[, .count, HGNC]
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N,HGNC)],
file="ranked_treatment_vs_outcome.csv",
row.names = FALSE,
col.names = c("HGNC_ID","count"))
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
row.names = FALSE,
col.names = FALSE)) #c("HGNC_ID","count"))
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
row.names = FALSE,
col.names = FALSE) #c("HGNC_ID","count"))
colnames(common_treatment_vs_outcome$HGNC) <- "count"
colnames(common_treatment_vs_outcome$HGNC) <- "count"
colnames(common_treatment_vs_outcome)[2] # <- "count"
colnames(common_treatment_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-N,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
View(common_treatment_vs_outcome)
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-count,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
series4 = read.csv(file = "GSE28735_common_genes.csv", header = TRUE)
series5 = read.csv(file = "GSE62452_common_genes.csv", header = TRUE)
series6 = read.csv(file = "GSE21501_common_genes.csv", header = TRUE)
common_g_expr_vs_outcome <- rbindlist(mget(paste0("series", 4:5)))[, .N, HGNC]
common_g_expr_vs_outcome[order(-N,HGNC)]
colnames(common_g_expr_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_g_expr_vs_outcome[order(-count,HGNC)],
file="ranked_gene_expression_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
series4 = read.csv(file = "GSE28735_common_genes.csv", header = TRUE)
series5 = read.csv(file = "GSE62452_common_genes.csv", header = TRUE)
series6 = read.csv(file = "GSE21501_common_genes.csv", header = TRUE)
common_g_expr_vs_outcome <- rbindlist(mget(paste0("series", 4:5)))[, .N, HGNC]
common_g_expr_vs_outcome[order(-N,HGNC)]
colnames(common_g_expr_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_g_expr_vs_outcome[order(-count,HGNC)],
file="ranked_gene_expression_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
##################
# Common to both #
##################
common_treatment_vs_outcome[common_treatment_vs_outcome$count==3]
series1 = read.csv(file = "GSE45757_common_genes.csv", header = TRUE)
series2 = read.csv(file = "GSE112282_common_genes.csv", header = TRUE)
series3 = read.csv(file = "GSE14426_common_genes.csv", header = TRUE)
common_treatment_vs_outcome <- rbindlist(mget(paste0("series", 1:3)))[, .N, HGNC]
common_treatment_vs_outcome[order(-N,HGNC)]
colnames(common_treatment_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-count,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
series1 = read.csv(file = "GSE45757_common_genes.csv", header = TRUE)
series2 = read.csv(file = "GSE112282_common_genes.csv", header = TRUE)
series3 = read.csv(file = "GSE14426_common_genes.csv", header = TRUE)
common_treatment_vs_outcome <- rbindlist(mget(paste0("series", 1:3)))[, .N, HGNC]
common_treatment_vs_outcome[order(-N,HGNC)]
colnames(common_treatment_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_treatment_vs_outcome[order(-count,HGNC)],
file="ranked_treatment_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
series4 = read.csv(file = "GSE28735_common_genes.csv", header = TRUE)
series5 = read.csv(file = "GSE62452_common_genes.csv", header = TRUE)
series6 = read.csv(file = "GSE21501_common_genes.csv", header = TRUE)
common_g_expr_vs_outcome <- rbindlist(mget(paste0("series", 4:5)))[, .N, HGNC]
common_g_expr_vs_outcome[order(-N,HGNC)]
colnames(common_g_expr_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_g_expr_vs_outcome[order(-count,HGNC)],
file="ranked_gene_expression_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
common <- rbindlist(mget(common_treatment_vs_outcome, common_g_expr_vs_outcome))[, .N, HGNC]
common <- rbindlist(common_treatment_vs_outcome, common_g_expr_vs_outcome)[, .N, HGNC]
common <- rbindlist(common_treatment_vs_outcome, common_g_expr_vs_outcome)[, .N, HGNC]
##################
# Common to both #
##################
subset_treatment_vs_outcome <- common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]
subset_g_expr_vs_outcome <- common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]
common <- rbindlist(subset_treatment_vs_outcome$HGNC, subset_g_expr_vs_outcome$HGNC)[, .N, HGNC]
common <- rbindlist(unlist(subset_treatment_vs_outcome$HGNC), unlist(subset_g_expr_vs_outcome$HGNC))[, .N, HGNC]
##################
# Common to both #
##################
subset_treatment_vs_outcome <- common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC
subset_g_expr_vs_outcome <- common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC
common <- rbindlist(subset_treatment_vs_outcome, subset_g_expr_vs_outcome)[, .N, HGNC]
##################
# Common to both #
##################
subset_treatment_vs_outcome <- as.data.frame(common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC)
View(subset_treatment_vs_outcome)
subset_g_expr_vs_outcome <- as.data.frame(common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC)
common <- rbindlist(subset_treatment_vs_outcome, subset_g_expr_vs_outcome)[, .N, HGNC]
##################
# Common to both #
##################
subset_treatment_vs_outcome <- as.list(common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC)
subset_g_expr_vs_outcome <- as.list(common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC)
common <- rbindlist(subset_treatment_vs_outcome, subset_g_expr_vs_outcome)[, .N, HGNC]
common <- rbindlist(subset_treatment_vs_outcome, subset_g_expr_vs_outcome, use.names = FALSE)[, .N, HGNC]
series4 = read.csv(file = "GSE28735_common_genes.csv", header = TRUE)
series5 = read.csv(file = "GSE62452_common_genes.csv", header = TRUE)
series6 = read.csv(file = "GSE21501_common_genes.csv", header = TRUE)
common_g_expr_vs_outcome <- rbindlist(mget(paste0("series", 4:6)))[, .N, HGNC]
common_g_expr_vs_outcome[order(-N,HGNC)]
colnames(common_g_expr_vs_outcome)[2] <- "count"
# Save as CSV
write.csv(common_g_expr_vs_outcome[order(-count,HGNC)],
file="ranked_gene_expression_vs_outcome.csv",
quote = FALSE,
row.names = FALSE)
##################
# Common to both #
##################
subset1 <- as.list(common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC)
subset2 <- as.list(common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC)
common <- rbindlist(mget(paste0("subset", 1:2)))[, .N, HGNC]
##################
# Common to both #
##################
subset1 <- common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC
subset2 <- common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC
common <- rbindlist(mget(paste0("subset", 1:2)))[, .N, HGNC]
subset2 <- as.data.frame(common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==2]$HGNC)
##################
# Common to both #
##################
subset1 <- as.data.frame(common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC)
View(series1)
View(subset1)
common <- rbindlist(mget(paste0("subset", 1:2)))[, .N, HGNC]
colnames(subset1)[2]
colnames(subset1)[1]
colnames(subset1)[1] <- "HGNC"
colnames(subset2)[1] <- "HGNC"
common <- rbindlist(mget(paste0("subset", 1:2)), use.names = FALSE)[, .N, HGNC]
View(common)
##################
# Common to both #
##################
subset1 <- as.data.frame(common_treatment_vs_outcome[common_treatment_vs_outcome$count==2]$HGNC)
subset2 <- as.data.frame(common_g_expr_vs_outcome[common_g_expr_vs_outcome$count==3]$HGNC)
colnames(subset1)[1] <- "HGNC"
colnames(subset2)[1] <- "HGNC"
common <- rbindlist(mget(paste0("subset", 1:2)), use.names = FALSE)[, .N, HGNC]
common[order(-N,HGNC)]
colnames(common)[2] <- "count"
# Save as CSV
write.csv(common[order(-count,HGNC)],
file="ranked.csv",
quote = FALSE,
row.names = FALSE)
